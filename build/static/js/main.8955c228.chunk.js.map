{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","useDeviceLanguage","firestore","SignIn","useState","phone","setPhone","className","onClick","provider","GoogleAuthProvider","signInWithPopup","src","alt","id","placeholder","type","value","onChange","e","target","captcha","RecaptchaVerifier","size","signInWithPhoneNumber","then","code","prompt","confirm","result","console","log","user","document","querySelector","textContent","catch","error","SignOut","currentUser","signOut","ChatRoom","formValue","setFormValue","dummy","useRef","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","sendMessage","a","preventDefault","uid","photoURL","avatarPhoto","add","text","createdAt","FieldValue","serverTimestamp","useEffect","current","scrollIntoView","behavior","map","message","ref","onSubmit","disabled","ChatMessage","messageClass","App","useAuthState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8955c228.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport \"firebase/firestore\";\nimport 'firebase/auth';\n// хуки из node-пакета firebase\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore'\n\n\n// конфигурация профиля приложения в firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCNO2asp4-fbpZ4Wr9eOoJufvghwrCF6M0\",\n  authDomain: \"test-chat-3be6e.firebaseapp.com\",\n  projectId: \"test-chat-3be6e\",\n  storageBucket: \"test-chat-3be6e.appspot.com\",\n  messagingSenderId: \"622935420397\",\n  appId: \"1:622935420397:web:f9d868bc78a3fc1111cbe4\"\n  // вставить конфиги из firebase\n})\n\nfirebase.auth().useDeviceLanguage();\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  //проверка в сервисе авторизации авторизован ли пользователь\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header >\n        <h1>ReactFirebase chat from Bohdan</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {/* условный рендеринг в зависимости от того, авторизован ли пользователь */}\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const [phone, setPhone] = useState(\"\");\n\n const signInWithPhone = () => {\n   //Делаем каптчу невидимой для тестового проекта(!). Чтобы ускорить работу. Так как это необходимый элемент метода смс-подтверждения в firebase\n  const captcha = new firebase.auth.RecaptchaVerifier(\"recaptcha-container\", {\n    size: \"invisible\",\n  });\n  //Сам метод смс-авторизации. Код адаптирован отсюда https://firebase.google.com/docs/auth/web/phone-auth\n  auth.signInWithPhoneNumber(phone, captcha)\n    .then((e) => {\n      const code = prompt(\"Введите код из СМС\", \"\");\n      if (code === null) return;\n//регистрируем код из смс\n      e.confirm(code)\n        .then((result) => {\n          console.log(result.user);\n\n          document.querySelector(\"label\").textContent += result.user.phone + \"Номер подтвержден\";\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n }\n  \n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    //Метод авторизации с помощью гугл аккаунта\n    auth.signInWithPopup(provider);\n  }\n  return (\n    <>\n      <div className=\"google-box\">\n      <div className=\"google-btn\" onClick={signInWithGoogle}>\n          <div className=\"google-icon-wrapper\" >\n            <img className=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"logo\"/>\n          </div>\n        <div className=\"btn-text\"><b>Войти через Google</b></div>\n      </div>\n      <br />\n      <div className=\"container\">\n        <div id=\"recaptcha-container\" />\n      </div>\n      </div>\n      <div className=\"flex-box\">\n      <input\n        className=\"phone-holder\"\n        placeholder=\"Введите номер телефона\"\n        type=\"phone\"\n        value={phone}\n        onChange={(e) => {\n          setPhone(e.target.value);\n        }}\n      />\n      <button id=\"phone\" type=\"button\" onClick={signInWithPhone}>\n        Войти с помощью СМС-кода\n      </button>\n      <label></label>\n      </div>\n    </>\n    \n  )\n\n}\n//Функция выхода. Использует метод сервиса auth - signOut. Проверяет существует ли залогиненый юзер\nconst SignOut = () => {\n  return (\n    auth.currentUser && (\n      <button type=\"button\" onClick={() => auth.signOut()}>\n        Выход\n      </button>\n    )\n  );\n};\n\nfunction ChatRoom() {\n\n  //Стейт для временного хранения введенного текста перед отправкой его на сервер.\n  const [formValue, setFormValue] = useState(\"\");\n\n  const dummy = useRef();//привязка к пустому спану, чтобы можно было управлять автоматической прокруткой\n\n  const messagesRef = firestore.collection(\"messages\"); //Подвязывание коллекции 'messages' в БД firestore\n  const query = messagesRef.orderBy(\"createdAt\").limitToLast(25); \n\n  const [messages] = useCollectionData(query, { idField: \"id\" }); //Хук прослушивает изменения в коллекции 'messages'. Возвращает массив с объектами, где каждый объект это сообщение.\n\n  //Обработчик сабмита. Отправляет введенный в форме текст на сервер.\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n\n    //прикрепляем изображение пользователя в зависимости от того, как он залогинился\n    //Если через гугл-аккаунт, то аватарка берется из него, если через смс - то дефолтная картинка\n    const avatarPhoto = photoURL ? photoURL : \"https://bit.ly/348yGrm\"\n\n    //метод добавления новой записи в БД\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),//Добавляем тайм-стамп к каждому сообщению как уникальный айдишник\n      uid,\n      avatarPhoto,\n    });\n\n    setFormValue(\"\");//очищение формы после отправки сообщения\n  };\n\n  //хук для автоматической прокрутки чата к последнему сообщению.\n  useEffect(() => {\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (<>\n    <div className=\"text-field\">\n      {messages &&\n        messages.map((message) => (\n          <ChatMessage key={message.id} message={message} />\n        ))}\n      </div>\n      <div className=\"send-form\">\n      <span ref={dummy} />\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=\"Напишите что-нибудь\"\n        />\n        <button type=\"submit\" disabled={!formValue}>\n        📤\n        </button>\n      </form>\n      </div>\n    \n\n  </>)\n}\n\n\n\nconst ChatMessage = ({ message }) => {\n  const { text, uid, avatarPhoto } = message;\n//условный выбор названия css-класса в зависимости от того ваше сообщение или других участников. Чисто для стилизации.\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n//рендер самого сообщения. Объект сообщения берется из пропсов. \n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={avatarPhoto} alt=\"avatar\"/>\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}